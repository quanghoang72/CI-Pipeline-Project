# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - Temper
    - Distance
    - dite
#- master

pr:
 - master
variables:
  tag: '$(Build.BuildId)'
  imageName: 'pipelines-gtest-docker'

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: Build uC/OS-III code and Run static code analysis  
  
  jobs:
  - job: Build
    displayName: Build uC/OS-III code
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          python -m pip install --upgrade pip  
          pip install --upgrade platformio
      displayName: Install python, platformio

    - bash: |
        pio check --fail-on-defect=medium --fail-on-defect=high
      displayName: Run cppcheck tool - static code analysis
    - bash: |
        pio run
      displayName: Build code by platformio

- stage: Test
  displayName: Run gtest with Docker

  jobs:
    - job: Build code
      displayName: Build Test case Code
      steps:
        - task: Docker@2
          displayName: Build an image
          inputs:
            repository: '$(imageName)'
            command: build
            Dockerfile: '$(Build.SourcesDirectory)/test/Dockerfile'
            tags: '$(tag)'

        - bash: |
            echo "Executing docker run command"
            docker run --name my_con -i --rm -v $(Build.SourcesDirectory)/my_output:/con_output $(imageName):$(tag) \
            cp /my_test.exe /con_output
          displayName: Mounted exefile volume in Docker

        - task: CopyFiles@2
          displayName: Copy Artifact 
          inputs:
            contents: '**/?(*.exe|*.dll|*.pdb)'
            targetFolder: $(Build.ArtifactStagingDirectory)

        - task: PublishBuildArtifacts@1
          displayName: Publish Artifact 
          inputs:
            pathToPublish: $(Build.ArtifactStagingDirectory)
            artifactName: MyBuildOutputs
    - job: Test
      displayName: Run gtest
      steps:
        - download: current
          artifact: MyBuildOutputs
        - script: |
            cd /$(Pipeline.Workspace)/MyBuildOutputs/my_output
            chmod 777 my_test.exe
            ./my_test.exe
          displayName: Run exec file